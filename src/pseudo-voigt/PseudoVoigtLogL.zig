//! Pseudo-Voigt Log-Likelihood
xvec: []f64,
tape: []f64,
value: f64, // -logL
deriv_out: []f64, // [ dy/dlogPv₁, dy/dlogPv₂, … ]

width: *PseudoVoigtWidth,
cdata: *CenteredData,
pvoigt: *PseudoVoigt,

solver: *BFGS,

const Self: type = @This();

fn init(allocator: mem.Allocator, xvec: []f64, wvec: []f64) !*Self {
    const self = try allocator.create(Self);
    errdefer allocator.destroy(self);

    const n: usize = wvec.len;

    self.xvec = xvec;

    self.tape = try allocator.alloc(f64, 5 * n + 6);
    errdefer allocator.free(self.tape);

    self.width = try PseudoVoigtWidth.init(allocator, self.tape, n);
    errdefer self.width.deinit(allocator);

    self.cdata = try CenteredData.init(allocator, self.tape, n);
    errdefer self.cdata.deinit(allocator);

    self.pvoigt = try PseudoVoigt.init(allocator, self.cdata, self.width, self.tape, n);
    errdefer self.pvoigt.deinit(allocator);

    self.solver = try BFGS.init(allocator, 3);

    @memset(self.tape[n..], 1.0);

    self.deriv_out = self.tape[0..n];
    for (self.deriv_out, wvec) |*p, w| p.* = -w; // dy/dlogPvᵢ = -wᵢ when y = -logL

    return self;
}

fn deinit(self: *Self, allocator: mem.Allocator) void {
    self.solver.deinit(allocator);

    self.pvoigt.deinit(allocator);
    self.cdata.deinit(allocator);
    self.width.deinit(allocator);

    allocator.free(self.tape);
    allocator.destroy(self);
}

fn forward(self: *Self, mode: f64, sigma: f64, gamma: f64) void {
    self.cdata.forward(self.xvec, mode);
    self.width.forward(sigma, gamma);
    self.pvoigt.forward();

    self.value = 0.0;
    for (self.deriv_out, self.pvoigt.deriv, self.pvoigt.value) |w, *dpV, pV| {
        self.value += w * @log(pV);
        dpV.* = 1.0 / pV; // [ dlogPv₁/dPv₁, dlogPv₂/dPv₂, … ]
    }
}

fn backward(self: *Self, deriv_out: []f64) void {
    self.pvoigt.backward();
    self.cdata.backward(deriv_out);
    self.width.backward(deriv_out);
}

pub fn func(self: *Self, x: []f64) f64 {
    self.forward(x[0], x[1], x[2]);
    if (self.value <= 0.0) unreachable;
    return self.value;
}

pub fn grad(self: *Self, x: []f64, g: []f64) void {
    self.forward(x[0], x[1], x[2]);
    self.backward(g);
}

test "PseudoVoigtLogL: forward & backward" {
    const page = testing.allocator;

    // const xvec: []f64 = try page.alloc(f64, 21);
    const xvec: []f64 = try page.alloc(f64, 401);
    defer page.free(xvec);

    // const wvec: []f64 = try page.alloc(f64, 21);
    const wvec: []f64 = try page.alloc(f64, 401);
    defer page.free(wvec);

    // for (xvec, 0..) |*p, i| p.* = @as(f64, @floatFromInt(i)) - 10.0;
    for (xvec, 0..) |*p, i| p.* = 0.1 * @as(f64, @floatFromInt(i)) - 20.0;

    // Generated exact Voigt function with (μ, σ, γ) = (-1.0, 1.53, 1.02)
    // inline for (.{
    //     0x1.1cf5be03beea0p-8,
    //     0x1.71bc643f76115p-8,
    //     0x1.f657f84e55806p-8,
    //     0x1.6d5ba458e6b91p-7,
    //     0x1.24e2e3804fc37p-6, // 05
    //     0x1.04421cccb1950p-5,
    //     0x1.e14cf4fce3a26p-5,
    //     0x1.9cd1e2a6d554fp-4,
    //     0x1.28a1a44b3b02bp-3,
    //     0x1.50c5d694e3f72p-3, // 10
    //     0x1.28a1a44b3b02bp-3,
    //     0x1.9cd1e2a6d554fp-4,
    //     0x1.e14cf4fce3a26p-5,
    //     0x1.04421cccb1950p-5,
    //     0x1.24e2e3804fc37p-6, // 15
    //     0x1.6d5ba458e6b91p-7,
    //     0x1.f657f84e55806p-8,
    //     0x1.71bc643f76115p-8,
    //     0x1.1cf5be03beea0p-8,
    //     0x1.c5f095d8a3491p-9, // 20
    //     0x1.72b121352ac63p-9,
    // }, wvec) |v, *p| p.* = v;
    inline for (.{
        0.0005498848800452803,
        0.0,
        0.0009594904991527313,
        0.001914492114196369,
        0.0,
        0.0,
        0.003030987572948345,
        0.004046793723942818,
        0.0035787664324842595,
        0.0,
        0.0067575078723773555,
        0.0,
        0.008333605425869688,
        0.0,
        0.009205844621199699,
        0.002767713843449656,
        0.0,
        0.0,
        0.006092029032295616,
        0.0,
        0.0,
        0.005595735434256939,
        0.0,
        0.0006935780028443539,
        0.0,
        0.0,
        0.0015881896846980867,
        0.002105355966102558,
        0.0005753407197884681,
        0.0,
        0.001677720959726855,
        0.004942314693325198,
        0.0010489131510512104,
        0.00321692250579355,
        0.0010695733114074117,
        0.0016770710517060809,
        0.0024208730103521875,
        0.0033422384161640463,
        0.005238836114210151,
        0.00870580907916414,
        0.0,
        0.0,
        0.009399274122397263,
        0.0,
        0.0,
        0.0,
        0.003941314801094565,
        0.004098548531328797,
        0.0013669003127346892,
        0.007468749806275626,
        0.0,
        0.004207595556719207,
        0.0,
        0.0,
        0.0,
        0.006122992914368422,
        0.007585125351799736,
        0.008807185533013996,
        0.0022995100960026705,
        0.005362569493662454,
        0.0,
        0.010964847710667101,
        0.001999988265400597,
        0.0,
        0.0,
        0.007070717947028831,
        0.008910321592792904,
        0.00018495788113862422,
        0.0,
        0.006844196550598159,
        0.010430001089066814,
        0.0,
        0.00972631181301303,
        0.0032258983202000796,
        0.0,
        0.0,
        0.0018492503715983476,
        0.019675979646507132,
        0.008116749678119695,
        0.004723986913734863,
        0.0068274779348292125,
        0.006968706237305659,
        0.004759681488264397,
        0.001973221759376393,
        0.006227815526364577,
        0.008177793191619535,
        0.0,
        0.004021834148142012,
        0.0,
        0.00266680260679635,
        0.00747856658533101,
        0.002117053537604976,
        0.0,
        0.0017624469333820888,
        0.005856865955856118,
        0.008153633959374004,
        0.0025574209034816414,
        0.0,
        0.0032317650099182955,
        0.0036452880583408838,
        0.011038160157974573,
        0.0,
        0.0034211939605429064,
        0.0027441144420311805,
        0.0064555493157161204,
        0.00045864712896055097,
        0.004279194010057804,
        0.010240513355315093,
        0.0,
        0.0076084227756413126,
        0.010492743041721398,
        0.009018041071926072,
        0.008534553550979785,
        0.005960459072777177,
        0.009109790640821463,
        0.009144203616380294,
        0.010236571621800892,
        0.011889518493405981,
        0.0023264261838732573,
        0.009167796404111386,
        0.0051571147176629585,
        0.0,
        0.008463329964142539,
        0.004092165300954203,
        0.0048122133552325475,
        0.023966552795395467,
        0.0065813576108832254,
        0.015824253683716975,
        0.007131673874489555,
        0.008537598410577102,
        0.01313278997935079,
        0.019343732437894903,
        0.007336134595599657,
        0.010856913668051322,
        0.011616143779915315,
        0.017980682312729417,
        0.013575558042667387,
        0.007539765422911706,
        0.01916149816099599,
        0.02116144801322453,
        0.02366478289518075,
        0.018995362310291978,
        0.023962933238156608,
        0.017178555026827316,
        0.018101323313985784,
        0.008261514758504234,
        0.01847831608349793,
        0.024006448707456357,
        0.02650822771263016,
        0.03143882289281636,
        0.03564478056656192,
        0.02715664294842325,
        0.02517648090775398,
        0.03673370518000943,
        0.04237827824477676,
        0.03864334278113367,
        0.04651285574438302,
        0.05472044202903083,
        0.04889192739992061,
        0.0582688615807517,
        0.0531753475955795,
        0.06359879948289891,
        0.06425822341836301,
        0.07958747377201743,
        0.06898099957627409,
        0.06586795829762711,
        0.07741933336301608,
        0.08557059691163159,
        0.09150814040566116,
        0.09108690727957396,
        0.10427158568322233,
        0.11412696021374852,
        0.11564616335620984,
        0.117006640032006,
        0.12144287888000921,
        0.12069312789289594,
        0.12601203184821042,
        0.13566276031001961,
        0.14164192645549306,
        0.14169194703320834,
        0.1467720408175849,
        0.14730058739566382,
        0.15606923806173592,
        0.1588223086161942,
        0.15072914391686523,
        0.16641020785228075,
        0.1644877952153308,
        0.16633732069719517,
        0.17252431451829262,
        0.16001199002123984,
        0.15360729902934964,
        0.1656591778662112,
        0.1645537046282334,
        0.15899647450834511,
        0.1617552921245442,
        0.16653605948624622,
        0.16819064106363557,
        0.1454338635357017,
        0.1533852315586137,
        0.13516616025798991,
        0.14575840281517918,
        0.14778030576017953,
        0.12622151460108047,
        0.13484277818181373,
        0.12192073769657835,
        0.12702214931011568,
        0.12284562801234335,
        0.12318793297755912,
        0.1051566085140442,
        0.10571294408659981,
        0.09909114592368791,
        0.08467959400064835,
        0.08466071136857774,
        0.09667723346620871,
        0.08009914850070268,
        0.07651449556749133,
        0.0699731637133747,
        0.06871006042976364,
        0.067185554846876,
        0.056935117285311476,
        0.059036425980082886,
        0.05860881404855454,
        0.05036084785406752,
        0.04297087794583841,
        0.04534804094333775,
        0.049948805913708594,
        0.03692271304926613,
        0.04657451099499637,
        0.027168730619489472,
        0.03316619996508121,
        0.030328279899296724,
        0.028100668145536557,
        0.027511026731301423,
        0.02296367897409738,
        0.029071058938518666,
        0.02426910721606487,
        0.023666882276940224,
        0.01707482863121992,
        0.008119590596956416,
        0.020072703930765882,
        0.02008346599027832,
        0.011438560939432255,
        0.013927488706329977,
        0.012446048521454006,
        0.014607083109403115,
        0.013427986275816487,
        0.010953330076454243,
        0.012133438650235601,
        0.007853969440986451,
        0.017271449699106003,
        0.006532668592296615,
        0.000434266852318484,
        0.012496564181509401,
        0.006265049042862247,
        0.010861237202451607,
        0.0002687086802245619,
        0.017617755786164587,
        0.01056335028306735,
        0.01111006702691338,
        0.0011765521649081904,
        0.011808968010275206,
        0.014954850790510808,
        0.006522851775253124,
        0.013420894530169498,
        0.00828145084370986,
        0.006085752951200532,
        0.0051716995269554585,
        0.0013683397658843912,
        0.0005778516384772692,
        0.0,
        0.009252117995399434,
        0.0002551833895899974,
        0.013273662372127158,
        0.0035502794711936188,
        0.006392063389320326,
        0.00875466205668712,
        0.00927493411813025,
        0.008829173157303454,
        0.007144651930284865,
        0.009829008901340919,
        0.00038848417056379717,
        0.0,
        0.004836081905898153,
        0.00428004579993518,
        0.0,
        0.0,
        0.00540731700286673,
        0.005641924395926314,
        0.002043049874320547,
        0.0010647549433690081,
        0.002811144594627452,
        0.0,
        0.00155673664047684,
        0.0,
        0.0070752110818547605,
        0.0034967707294959916,
        0.0,
        0.001013343152464632,
        0.0030552994639118404,
        0.0,
        0.0,
        0.002743178495419881,
        0.00836510540216107,
        0.0012403669870875132,
        0.0003727197121155281,
        0.0,
        0.0,
        0.011803750382302261,
        0.0,
        0.0,
        0.0,
        0.006451583983362813,
        0.0,
        0.0018407038730796229,
        0.0,
        0.003597101764337007,
        0.00629953976668899,
        0.006243011530043439,
        0.0,
        0.003389025229485713,
        0.0,
        0.0,
        0.0,
        0.0,
        0.004541001472912682,
        0.0033935347535434647,
        0.008520991966067861,
        0.010647456771626904,
        0.0,
        0.01168337517672329,
        0.006302317275212473,
        0.0,
        0.0,
        0.0007596154941156457,
        0.003857993368234885,
        0.0,
        0.0,
        0.008679064699935238,
        0.0005961794284223284,
        0.0029069344298663802,
        0.0,
        0.0016278484831688464,
        0.0032434066165293977,
        0.0011690185474371804,
        0.0,
        0.010424599090041856,
        0.0,
        0.0029176316411858834,
        0.0016437530959049734,
        0.00027815084219165584,
        0.005041847674656837,
        0.0015230458300311495,
        0.005229109397897976,
        0.0,
        0.004242423773733686,
        0.005473796484197144,
        0.0021830141999917936,
        0.0,
        0.004077872304789239,
        0.0,
        0.0007443686874087908,
        0.0,
        0.001763489754884883,
        0.0,
        0.0,
        0.00023288789875695827,
        0.007435380006435909,
        0.0,
        0.0,
        0.0006874344535916473,
        0.001957541515370243,
        0.0035982073034614153,
        0.0,
        0.0,
        0.0016629523967274197,
        0.0,
        0.003978961935363681,
        0.006811155333438327,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        5.077181606173058e-6,
        0.0015897309934761329,
        0.0,
        0.00019451796433662266,
        0.0,
        0.006277387423893834,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0005889601596106173,
        0.00787608056588254,
        0.00858039195809805,
        0.0,
        0.0,
    }, wvec) |v, *p| p.* = v;

    const self: *Self = try Self.init(page, xvec, wvec);
    defer self.deinit(page);

    const dest: []f64 = try page.alloc(f64, 3);
    defer page.free(dest);

    self.forward(test_mode, test_sigma, test_gamma);
    self.backward(dest);

    // try testing.expectApproxEqRel(self.value, 0x1.46f9bbe34e92fp+1, 4e-16);
    // try testing.expectApproxEqRel(dest[0], 0x1.55430572f2e75p-3, 2e-16);
    // try testing.expectApproxEqRel(dest[1], -0x1.ec76cbe9ae12dp-8, 9e-15);
    // try testing.expectApproxEqRel(dest[2], 0x1.ff4ac03304d78p-5, 8e-16);

    const bfgs = self.solver;
    inline for (.{ test_mode, test_sigma, test_gamma }, bfgs.xm) |v, *p| p.* = v;
    debug.print("{d}, -logL = {d}, width = {d}\n", .{ bfgs.xm, self.func(bfgs.xm), self.width.value });

    var terminated: bool = try bfgs.firstStep(self, .{ .xtol = 1e-12, .gtol = 1e-12 });
    debug.print(
        "init: {d}, -logL = {d}, width = {d}, {any}\n",
        .{ bfgs.xm, self.func(bfgs.xm), self.width.value, terminated },
    );

    _ = &terminated;
    // while (!terminated) {
    for (0..100) |i| {
        // terminated = try bfgs.firstStep(self, .{ .xtol = 1e-12, .gtol = 1e-12 });
        terminated = try bfgs.iterate(self, .{ .xtol = 1e-16, .gtol = 1e-16 });
        debug.print(
            "{d: >4}: {d}, -logL = {d}, width = {d}, {any}\n",
            .{ i, bfgs.xm, self.func(bfgs.xm), self.width.value, terminated },
        );
    }
}

const test_mode: comptime_float = 0.878;
// const test_sigma: comptime_float = 2.171;
// const test_gamma: comptime_float = 1.305;
// const test_sigma: comptime_float = 0.5;
// const test_gamma: comptime_float = 0.5;
const test_sigma: comptime_float = 3.0;
const test_gamma: comptime_float = 3.0;

const std = @import("std");
const mem = std.mem;
const math = std.math;
const debug = std.debug;
const testing = std.testing;

const PseudoVoigt = @import("./PseudoVoigt.zig");
const CenteredData = @import("./CenteredData.zig");
const PseudoVoigtWidth = @import("./PseudoVoigtWidth.zig");

const BFGS = @import("./BFGS.zig");
